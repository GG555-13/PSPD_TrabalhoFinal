# Deployment do Socket Server - Jogo da Vida Distribuído
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jogodavida-server-deployment
  namespace: jogodavida
  labels:
    app: jogodavida-server
    version: v1.0
spec:
  replicas: 2  # Começar com 2 réplicas
  selector:
    matchLabels:
      app: jogodavida-server
  template:
    metadata:
      labels:
        app: jogodavida-server
    spec:
      containers:
      - name: socket-server
        image: jogodavida-server:latest
        imagePullPolicy: Never  # Usar imagem local do docker-compose
        ports:
        - containerPort: 8080
          name: socket-port
        env:
        - name: OMP_NUM_THREADS
          value: "4"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        # Graceful shutdown
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]

---
# Service para Load Balancing
apiVersion: v1
kind: Service
metadata:
  name: jogodavida-server-service
  namespace: jogodavida
  labels:
    app: jogodavida-server
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: socket-port
  selector:
    app: jogodavida-server

---
# HorizontalPodAutoscaler para Auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: jogodavida-server-hpa
  namespace: jogodavida
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jogodavida-server-deployment
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60